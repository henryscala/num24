/* Generated by the Nim Compiler v1.4.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI1214633 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214637 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1208044 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1400043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1214408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214728 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1208015 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI1214723 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1214617 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214619 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1214649 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1208013 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI1880045 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI1208005 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI1880043 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
NTI1880043.base = NTI1208005;
NTI1880045.base = NTI1208013;
var NNI1214649 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214649.node = NNI1214649;
var NNI1214619 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214619.node = NNI1214619;
NTI1214723.base = NTI1214617;
NTI1214728.base = NTI1214617;
var NNI1214617 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI1214723, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI1208015, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI1208013, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI1208013, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI1214728, name: "up", sons: null}]};
NTI1214617.node = NNI1214617;
var NNI1214408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214408.node = NNI1214408;
NTI1214617.base = NTI1214408;
NTI1214619.base = NTI1214617;
NTI1214649.base = NTI1214619;
var NNI1400043 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1208015, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1208044, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI1208015, name: "Field2", sons: null}]};
NTI1400043.node = NNI1400043;
var NNI1214637 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214637.node = NNI1214637;
var NNI1214633 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1214633.node = NNI1214633;
NTI1214633.base = NTI1214619;
NTI1214637.base = NTI1214633;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_1490023, src_1490024, ti_1490025) {
  var result_1495219 = null;

    switch (ti_1490025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_1485401(ti_1490025))) {
      result_1495219 = src_1490024;
      }
      else {
        result_1495219 = [src_1490024[0], src_1490024[1]];
      }
      
      break;
    case 19:
            if (dest_1490023 === null || dest_1490023 === undefined) {
        dest_1490023 = {};
      }
      else {
        for (var key in dest_1490023) { delete dest_1490023[key]; }
      }
      for (var key in src_1490024) { dest_1490023[key] = src_1490024[key]; }
      result_1495219 = dest_1490023;
    
      break;
    case 18:
    case 17:
      if (!((ti_1490025.base == null))) {
      result_1495219 = nimCopy(dest_1490023, src_1490024, ti_1490025.base);
      }
      else {
      if ((ti_1490025.kind == 17)) {
      result_1495219 = (dest_1490023 === null || dest_1490023 === undefined) ? {m_type: ti_1490025} : dest_1490023;
      }
      else {
        result_1495219 = (dest_1490023 === null || dest_1490023 === undefined) ? {} : dest_1490023;
      }
      }
      nimCopyAux(result_1495219, src_1490024, ti_1490025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_1490024 === null) {
        result_1495219 = null;
      }
      else {
        if (dest_1490023 === null || dest_1490023 === undefined) {
          dest_1490023 = new Array(src_1490024.length);
        }
        else {
          dest_1490023.length = src_1490024.length;
        }
        result_1495219 = dest_1490023;
        for (var i = 0; i < src_1490024.length; ++i) {
          result_1495219[i] = nimCopy(result_1495219[i], src_1490024[i], ti_1490025.base);
        }
      }
    
      break;
    case 28:
            if (src_1490024 !== null) {
        result_1495219 = src_1490024.slice(0);
      }
    
      break;
    default: 
      result_1495219 = src_1490024;
      break;
    }

  return result_1495219;

}
function cstrToNimstr(c_1475079) {
      var ln = c_1475079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_1475079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_1475079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function makeNimstrLit(c_1475062) {
      var ln = c_1475062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_1475062.charCodeAt(i);
  }
  return result;
  

  
}
function arrayConstr(len_1500067, value_1500068, typ_1500069) {
        var result = new Array(len_1500067);
    for (var i = 0; i < len_1500067; ++i) result[i] = nimCopy(null, value_1500068, typ_1500069);
    return result;
  

  
}
function toJSStr(s_1475096) {
                    var Tmp5;
            var Tmp7;

  var result_1475097 = null;

    var res_1475170 = newSeq_1475128((s_1475096).length);
    var i_1475172 = 0;
    var j_1475174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_1475172 < (s_1475096).length)) break L2;
          var c_1475175 = s_1475096[i_1475172];
          if ((c_1475175 < 128)) {
          res_1475170[j_1475174] = String.fromCharCode(c_1475175);
          i_1475172 += 1;
          }
          else {
            var helper_1475198 = newSeq_1475128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_1475199 = c_1475175.toString(16);
                  if (((code_1475199).length == 1)) {
                  helper_1475198.push("%0");;
                  }
                  else {
                  helper_1475198.push("%");;
                  }
                  
                  helper_1475198.push(code_1475199);;
                  i_1475172 += 1;
                    if (((s_1475096).length <= i_1475172)) Tmp5 = true; else {                      Tmp5 = (s_1475096[i_1475172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_1475175 = s_1475096[i_1475172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_1475170[j_1475174] = decodeURIComponent(helper_1475198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_1475170[j_1475174] = helper_1475198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_1475174 += 1;
        }
    } while(false);
    if (res_1475170.length < j_1475174) { for (var i=res_1475170.length;i<j_1475174;++i) res_1475170.push(null); }
               else { res_1475170.length = j_1475174; };
    result_1475097 = res_1475170.join("");

  return result_1475097;

}
function raiseException(e_1440218, ename_1440219) {
    e_1440218.name = ename_1440219;
    if ((excHandler == 0)) {
    unhandledException(e_1440218);
    }
    
    e_1440218.trace = nimCopy(null, rawWriteStackTrace_1430260(), NTI1208013);
    throw e_1440218;

  
}
function chckIndx(i_1500086, a_1500087, b_1500088) {
      var Tmp1;

  var result_1500089 = 0;

  BeforeRet: do {
      if (!(a_1500087 <= i_1500086)) Tmp1 = false; else {        Tmp1 = (i_1500086 <= b_1500088);      }    if (Tmp1) {
    result_1500089 = i_1500086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_1500086, a_1500087, b_1500088);
    }
    
  } while (false);

  return result_1500089;

}
function addInt(a_1480419, b_1480420) {
        var result = a_1480419 + b_1480420;
    checkOverflowInt(result);
    return result;
  

  
}
function subInt(a_1480437, b_1480438) {
        var result = a_1480437 - b_1480438;
    checkOverflowInt(result);
    return result;
  

  
}
function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
var globalRaiseHook_1377018 = [null];
var localRaiseHook_1377023 = [null];
var outOfMemHook_1377026 = [null];
var unhandledExceptionHook_1377031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var F={procname:"module num24",prev:framePtr,filename:"c:\\temp\\num24\\nim\\num24.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module num24",prev:framePtr,filename:"c:\\temp\\num24\\nim\\num24.nim",line:0};
framePtr = F;
framePtr = F.prev;
function isFatPointer_1485401(ti_1485403) {
  var result_1485404 = false;

  BeforeRet: do {
    result_1485404 = !((ConstSet1[ti_1485403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_1485404;

}
function nimCopyAux(dest_1490028, src_1490029, n_1490031) {
    switch (n_1490031.kind) {
    case 0:
      break;
    case 1:
            dest_1490028[n_1490031.offset] = nimCopy(dest_1490028[n_1490031.offset], src_1490029[n_1490031.offset], n_1490031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_1490031.sons.length; i++) {
      nimCopyAux(dest_1490028, src_1490029, n_1490031.sons[i]);
    }
    
      break;
    case 3:
            dest_1490028[n_1490031.offset] = nimCopy(dest_1490028[n_1490031.offset], src_1490029[n_1490031.offset], n_1490031.typ);
      for (var i = 0; i < n_1490031.sons.length; ++i) {
        nimCopyAux(dest_1490028, src_1490029, n_1490031.sons[i][1]);
      }
    
      break;
    }

  
}
function abs_1285247(x_1285249) {
    var Tmp1;

  var result_1285250 = 0.0;

    if ((x_1285249 < 0.0)) {
    Tmp1 = -(x_1285249);
    }
    else {
    Tmp1 = x_1285249;
    }
    
    result_1285250 = Tmp1;

  return result_1285250;

}
function add_1377042(x_1377045, x_1377045_Idx, y_1377046) {
          if (x_1377045[x_1377045_Idx] === null) { x_1377045[x_1377045_Idx] = []; }
      var off = x_1377045[x_1377045_Idx].length;
      x_1377045[x_1377045_Idx].length += y_1377046.length;
      for (var i = 0; i < y_1377046.length; ++i) {
        x_1377045[x_1377045_Idx][off+i] = y_1377046.charCodeAt(i);
      }
    

  
}
function auxWriteStackTrace_1400038(f_1400040) {
          var Tmp3;

  var result_1400041 = [[]];

    var it_1400051 = f_1400040;
    var i_1400053 = 0;
    var total_1400055 = 0;
    var tempFrames_1400062 = arrayConstr(64, {Field0: null, Field1: 0, Field2: null}, NTI1400043);
    L1: do {
        L2: while (true) {
          if (!!((it_1400051 == null))) Tmp3 = false; else {            Tmp3 = (i_1400053 <= 63);          }        if (!Tmp3) break L2;
          tempFrames_1400062[i_1400053].Field0 = it_1400051.procname;
          tempFrames_1400062[i_1400053].Field1 = it_1400051.line;
          tempFrames_1400062[i_1400053].Field2 = it_1400051.filename;
          i_1400053 += 1;
          total_1400055 += 1;
          it_1400051 = it_1400051.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_1400051 == null))) break L5;
          total_1400055 += 1;
          it_1400051 = it_1400051.prev;
        }
    } while(false);
    result_1400041[0] = nimCopy(null, [], NTI1208013);
    if (!((total_1400055 == i_1400053))) {
    result_1400041[0].push.apply(result_1400041[0], makeNimstrLit("("));;
    result_1400041[0].push.apply(result_1400041[0], cstrToNimstr(((total_1400055 - i_1400053))+""));;
    result_1400041[0].push.apply(result_1400041[0], makeNimstrLit(" calls omitted) ...\x0A"));;
    }
    
    L6: do {
      var j_1415236 = 0;
      var colontmp__1880117 = 0;
      colontmp__1880117 = (i_1400053 - 1);
      var res_1880122 = colontmp__1880117;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_1880122)) break L8;
            j_1415236 = res_1880122;
            result_1400041[0].push.apply(result_1400041[0], cstrToNimstr(tempFrames_1400062[j_1415236].Field2));;
            if ((0 < tempFrames_1400062[j_1415236].Field1)) {
            result_1400041[0].push.apply(result_1400041[0], makeNimstrLit("("));;
            result_1400041[0].push.apply(result_1400041[0], cstrToNimstr((tempFrames_1400062[j_1415236].Field1)+""));;
            if (false) {
            result_1400041[0].push.apply(result_1400041[0], makeNimstrLit(", "));;
            result_1400041[0].push.apply(result_1400041[0], makeNimstrLit("0"));;
            }
            
            result_1400041[0].push.apply(result_1400041[0], makeNimstrLit(")"));;
            }
            
            result_1400041[0].push.apply(result_1400041[0], makeNimstrLit(" at "));;
            add_1377042(result_1400041, 0, tempFrames_1400062[j_1415236].Field0);
            result_1400041[0].push.apply(result_1400041[0], makeNimstrLit("\x0A"));;
            res_1880122 -= 1;
          }
      } while(false);
    } while(false);

  return result_1400041[0];

}
function rawWriteStackTrace_1430260() {
  var result_1430262 = [];

    if (!((framePtr == null))) {
    result_1430262 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(auxWriteStackTrace_1400038(framePtr) || []), NTI1208013);
    }
    else {
      result_1430262 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI1208013);
    }
    

  return result_1430262;

}
function newSeq_1475128(len_1475131) {
  var result_1475133 = [];

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"C:\\Users\\xuuuvhon\\.choosenim\\toolchains\\nim-1.4.0\\lib\\system.nim",line:0};
  framePtr = F;
    F.line = 656;
    result_1475133 = new Array(len_1475131); for (var i=0;i<len_1475131;++i) {result_1475133[i]=null;}  framePtr = F.prev;

  return result_1475133;

}
function unhandledException(e_1435059) {
    var buf_1435060 = [[]];
    if (!(((e_1435059.message).length == 0))) {
    buf_1435060[0].push.apply(buf_1435060[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_1435060[0].push.apply(buf_1435060[0], e_1435059.message);;
    }
    else {
    buf_1435060[0].push.apply(buf_1435060[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_1435060[0].push.apply(buf_1435060[0], makeNimstrLit(" ["));;
    add_1377042(buf_1435060, 0, e_1435059.name);
    buf_1435060[0].push.apply(buf_1435060[0], makeNimstrLit("]\x0A"));;
    buf_1435060[0].push.apply(buf_1435060[0], rawWriteStackTrace_1430260());;
    var cbuf_1440201 = toJSStr(buf_1435060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_1440201);
  }
  else {
    throw cbuf_1440201;
  }
  

  
}
function raiseIndexError(i_1460047, a_1460048, b_1460049) {
    var Tmp1;

    if ((b_1460049 < a_1460048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_1460047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_1460048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_1460049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI1208013), parent: null, m_type: NTI1214649, name: null, trace: [], up: null}, "IndexDefect");

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI1214637, name: null, trace: [], up: null}, "OverflowDefect");

  
}
function checkOverflowInt(a_1480403) {
        if (a_1480403 > 2147483647 || a_1480403 < -2147483648) raiseOverflow();
  

  
}
function pointsGame_1872019(n_1872021, number_1872025, resultExp_1872029) {
  var result_1872030 = false;

  var F={procname:"num24.pointsGame",prev:framePtr,filename:"c:\\temp\\num24\\nim\\num24.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((n_1872021 == 1)) {
    if ((abs_1285247((number_1872025[chckIndx(0, 0, (number_1872025).length-1)] - 2.4000000000000000e+001)) < 9.9999999999999995e-007)) {
    F.line = 19;
    result_1872030 = true;
    break BeforeRet;
    }
    else {
      F.line = 21;
      result_1872030 = false;
      break BeforeRet;
    }
    
    }
    
    L1: do {
      F.line = 23;
      var i_1872038 = 0;
      F.line = 106;
      var i_1880103 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_1880103 < n_1872021)) break L3;
            F.line = 23;
            i_1872038 = i_1880103;
            L4: do {
              F.line = 24;
              var j_1872044 = 0;
              F.line = 104;
              var colontmp__1880099 = 0;
              F.line = 24;
              colontmp__1880099 = addInt(i_1872038, 1);
              F.line = 106;
              var i_1880101 = colontmp__1880099;
              L5: do {
                F.line = 107;
                  L6: while (true) {
                  if (!(i_1880101 < n_1872021)) break L6;
                    F.line = 24;
                    j_1872044 = i_1880101;
                    F.line = 26;
                    var a_1872045 = 0.0;
                    F.line = 26;
                    var b_1872046 = 0.0;
                    F.line = 27;
                    var expa_1872047 = [];
                    F.line = 27;
                    var expb_1872048 = [];
                    F.line = 29;
                    a_1872045 = number_1872025[chckIndx(i_1872038, 0, (number_1872025).length-1)];
                    F.line = 30;
                    b_1872046 = number_1872025[chckIndx(j_1872044, 0, (number_1872025).length-1)];
                    F.line = 31;
                    number_1872025[chckIndx(j_1872044, 0, (number_1872025).length-1)] = number_1872025[chckIndx(subInt(n_1872021, 1), 0, (number_1872025).length-1)];
                    F.line = 32;
                    expa_1872047 = nimCopy(null, resultExp_1872029[chckIndx(i_1872038, 0, (resultExp_1872029).length-1)], NTI1208013);
                    F.line = 33;
                    expb_1872048 = nimCopy(null, resultExp_1872029[chckIndx(j_1872044, 0, (resultExp_1872029).length-1)], NTI1208013);
                    F.line = 34;
                    resultExp_1872029[chckIndx(j_1872044, 0, (resultExp_1872029).length-1)] = nimCopy(null, resultExp_1872029[chckIndx(subInt(n_1872021, 1), 0, (resultExp_1872029).length-1)], NTI1208013);
                    F.line = 36;
                    resultExp_1872029[chckIndx(i_1872038, 0, (resultExp_1872029).length-1)] = nimCopy(null, (makeNimstrLit("(") || []).concat(expa_1872047 || [],makeNimstrLit("+") || [],expb_1872048 || [],makeNimstrLit(")") || []), NTI1208013);
                    F.line = 37;
                    number_1872025[chckIndx(i_1872038, 0, (number_1872025).length-1)] = (a_1872045 + b_1872046);
                    if (pointsGame_1872019(subInt(n_1872021, 1), number_1872025, resultExp_1872029)) {
                    F.line = 39;
                    result_1872030 = true;
                    break BeforeRet;
                    }
                    
                    F.line = 41;
                    resultExp_1872029[chckIndx(i_1872038, 0, (resultExp_1872029).length-1)] = nimCopy(null, (makeNimstrLit("(") || []).concat(expa_1872047 || [],makeNimstrLit("-") || [],expb_1872048 || [],makeNimstrLit(")") || []), NTI1208013);
                    F.line = 42;
                    number_1872025[chckIndx(i_1872038, 0, (number_1872025).length-1)] = (a_1872045 - b_1872046);
                    if (pointsGame_1872019(subInt(n_1872021, 1), number_1872025, resultExp_1872029)) {
                    F.line = 44;
                    result_1872030 = true;
                    break BeforeRet;
                    }
                    
                    F.line = 46;
                    resultExp_1872029[chckIndx(i_1872038, 0, (resultExp_1872029).length-1)] = nimCopy(null, (makeNimstrLit("(") || []).concat(expb_1872048 || [],makeNimstrLit("-") || [],expa_1872047 || [],makeNimstrLit(")") || []), NTI1208013);
                    F.line = 47;
                    number_1872025[chckIndx(i_1872038, 0, (number_1872025).length-1)] = (b_1872046 - a_1872045);
                    if (pointsGame_1872019(subInt(n_1872021, 1), number_1872025, resultExp_1872029)) {
                    F.line = 49;
                    result_1872030 = true;
                    break BeforeRet;
                    }
                    
                    F.line = 51;
                    resultExp_1872029[chckIndx(i_1872038, 0, (resultExp_1872029).length-1)] = nimCopy(null, (makeNimstrLit("(") || []).concat(expa_1872047 || [],makeNimstrLit("*") || [],expb_1872048 || [],makeNimstrLit(")") || []), NTI1208013);
                    F.line = 52;
                    number_1872025[chckIndx(i_1872038, 0, (number_1872025).length-1)] = (a_1872045 * b_1872046);
                    if (pointsGame_1872019(subInt(n_1872021, 1), number_1872025, resultExp_1872029)) {
                    F.line = 54;
                    result_1872030 = true;
                    break BeforeRet;
                    }
                    
                    if (!((b_1872046 == 0.0))) {
                    F.line = 57;
                    resultExp_1872029[chckIndx(i_1872038, 0, (resultExp_1872029).length-1)] = nimCopy(null, (makeNimstrLit("(") || []).concat(expa_1872047 || [],makeNimstrLit("/") || [],expb_1872048 || [],makeNimstrLit(")") || []), NTI1208013);
                    F.line = 58;
                    number_1872025[chckIndx(i_1872038, 0, (number_1872025).length-1)] = (a_1872045 / b_1872046);
                    if (pointsGame_1872019(subInt(n_1872021, 1), number_1872025, resultExp_1872029)) {
                    F.line = 60;
                    result_1872030 = true;
                    break BeforeRet;
                    }
                    
                    }
                    
                    if (!((a_1872045 == 0.0))) {
                    F.line = 63;
                    resultExp_1872029[chckIndx(i_1872038, 0, (resultExp_1872029).length-1)] = nimCopy(null, (makeNimstrLit("(") || []).concat(expb_1872048 || [],makeNimstrLit("/") || [],expa_1872047 || [],makeNimstrLit(")") || []), NTI1208013);
                    F.line = 64;
                    number_1872025[chckIndx(i_1872038, 0, (number_1872025).length-1)] = (b_1872046 / a_1872045);
                    if (pointsGame_1872019(subInt(n_1872021, 1), number_1872025, resultExp_1872029)) {
                    F.line = 66;
                    result_1872030 = true;
                    break BeforeRet;
                    }
                    
                    }
                    
                    F.line = 68;
                    number_1872025[chckIndx(i_1872038, 0, (number_1872025).length-1)] = a_1872045;
                    F.line = 69;
                    number_1872025[chckIndx(j_1872044, 0, (number_1872025).length-1)] = b_1872046;
                    F.line = 70;
                    resultExp_1872029[chckIndx(i_1872038, 0, (resultExp_1872029).length-1)] = nimCopy(null, expa_1872047, NTI1208013);
                    F.line = 71;
                    resultExp_1872029[chckIndx(j_1872044, 0, (resultExp_1872029).length-1)] = nimCopy(null, expb_1872048, NTI1208013);
                    F.line = 109;
                    i_1880101 = addInt(i_1880101, 1);
                  }
              } while(false);
            } while(false);
            F.line = 109;
            i_1880103 = addInt(i_1880103, 1);
          }
      } while(false);
    } while(false);
    F.line = 73;
    result_1872030 = false;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1872030;

}
function pointsGameWrapper(num1_1880031, num2_1880032, num3_1880033, num4_1880034) {
  var result_1880035 = [];

  var F={procname:"num24.pointsGameWrapper",prev:framePtr,filename:"c:\\temp\\num24\\nim\\num24.nim",line:0};
  framePtr = F;
    F.line = 78;
    var number_1880038 = [new Float64Array(4)];
    F.line = 79;
    var resultExp_1880041 = [[[], [], [], []]];
    F.line = 80;
    var res_1880042 = false;
    F.line = 81;
    nimCopy(number_1880038[0], [num1_1880031, num2_1880032, num3_1880033, num4_1880034], NTI1880043);
    F.line = 82;
    nimCopy(resultExp_1880041[0], [cstrToNimstr((num1_1880031)+""), cstrToNimstr((num2_1880032)+""), cstrToNimstr((num3_1880033)+""), cstrToNimstr((num4_1880034)+"")], NTI1880045);
    F.line = 83;
    res_1880042 = pointsGame_1872019(4, number_1880038[0], resultExp_1880041[0]);
    if (!(res_1880042)) {
    F.line = 85;
    result_1880035 = nimCopy(null, [], NTI1208013);
    }
    else {
      F.line = 87;
      result_1880035 = nimCopy(null, resultExp_1880041[0][chckIndx(0, 0, (resultExp_1880041[0]).length-1)], NTI1208013);
    }
    
  framePtr = F.prev;

  return result_1880035;

}
var F={procname:"module num24",prev:framePtr,filename:"c:\\temp\\num24\\nim\\num24.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module num24",prev:framePtr,filename:"c:\\temp\\num24\\nim\\num24.nim",line:0};
framePtr = F;
F.line = 90;
rawEcho(pointsGameWrapper(3, 4, 1, 2));
F.line = 91;
rawEcho(pointsGameWrapper(3, 3, 3, 7));
F.line = 92;
rawEcho(pointsGameWrapper(5, 5, 5, 1));
framePtr = F.prev;
var F={procname:"module num24",prev:framePtr,filename:"c:\\temp\\num24\\nim\\num24.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module num24",prev:framePtr,filename:"c:\\temp\\num24\\nim\\num24.nim",line:0};
framePtr = F;
framePtr = F.prev;
